--- /dev/null
+++ b/chrome/browser/extensions/api/tld/tld_api.cc
@@ -0,0 +1,90 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/extensions/api/tld/tld_api.h"
+
+#include "base/values.h"
+#include "chrome/browser/extensions/extension_service.h"
+#include "extensions/common/extension.h"
+#include "chrome/common/extensions/extension_constants.h"
+#include "net/base/registry_controlled_domains/registry_controlled_domain.h"
+
+namespace {
+const char kInvalidUriError[] = "Invalid or unsupported URI";
+
+bool IsValidUrl(const GURL& url) {
+  return url.is_valid() && url.IsStandard() &&
+     !url.SchemeIsFile() && !url.SchemeIsFileSystem();
+}
+}  // namespace
+
+bool TldGetBaseDomainFunction::RunImpl() {
+  EXTENSION_FUNCTION_VALIDATE(args_->GetSize() == 1);
+
+  std::string uri;
+  EXTENSION_FUNCTION_VALIDATE(args_->GetString(0, &uri));
+
+  // We might delegate all the url validity check to GetDomainAndRegistry
+  // but try to be more explicit about the errors in some cases.
+  const GURL url(uri);
+  if (!IsValidUrl(url)) {
+    error_ = kInvalidUriError;
+    return false;
+  }
+
+  using namespace net::registry_controlled_domains;
+
+  std::string tld =
+    GetDomainAndRegistry(url, INCLUDE_PRIVATE_REGISTRIES);
+
+  SetResult(new base::StringValue(tld));
+
+  return true;
+}
+
+
+bool TldGetPublicSuffix::RunImpl() {
+  EXTENSION_FUNCTION_VALIDATE(args_->GetSize() == 2);
+
+  std::string uri;
+  EXTENSION_FUNCTION_VALIDATE(!args_->GetString(0, &uri));
+
+  // We might delegate all the url validity check to GetDomainAndRegistry
+  // or GetRegistryLength but try to be more explicit about the errors in
+  // some cases.
+  const GURL url(uri);
+  if (!IsValidUrl(url)) {
+    error_ = kInvalidUriError;
+    return false;
+  }
+
+  std::string suffix;
+
+  using namespace net::registry_controlled_domains;
+
+  size_t reg_len =
+    GetRegistryLength(url,
+		      EXCLUDE_UNKNOWN_REGISTRIES,
+		      INCLUDE_PRIVATE_REGISTRIES);
+
+  if (std::string::npos == reg_len || 0 == reg_len)
+    return false;
+
+  std::string tld =
+      GetDomainAndRegistry(url, INCLUDE_PRIVATE_REGISTRIES);
+
+  if (!tld.empty () && tld.size() > reg_len)
+    suffix = tld.substr(tld.size() - reg_len - 1, reg_len);
+
+  // An empty suffix is a acceptable value since the URL might be
+  // "properly formed" but might fall into cases such as:
+  // * http://co.uk/file.html
+  // * http://<IP address>/file.html
+  // which are described by GetRegistryLength to return 0 (i.e. a valid value).
+  SetResult(new base::StringValue(suffix));
+
+  return true;
+}
+
+
--- /dev/null
+++ b/chrome/browser/extensions/api/tld/tld_api.h
@@ -0,0 +1,28 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_EXTENSIONS_API_TLD_TLD_API_H_
+#define CHROME_BROWSER_EXTENSIONS_API_TLD_TLD_API_H_
+#pragma once
+
+#include "extensions/browser/extension_function.h"
+
+class TldGetBaseDomainFunction : public SyncExtensionFunction {
+ public:
+  DECLARE_EXTENSION_FUNCTION("tld.getBaseDomain",TLD_GET_BASE_DOMAIN);
+ protected:
+  virtual ~TldGetBaseDomainFunction() {}
+  virtual bool RunImpl() OVERRIDE;
+};
+
+class TldGetPublicSuffix : public SyncExtensionFunction {
+ public:
+  DECLARE_EXTENSION_FUNCTION("tld.getPublicSuffix",TLD_GET_PUBLIC_SUFFIX);
+ protected:
+  virtual ~TldGetPublicSuffix() {}
+  virtual bool RunImpl() OVERRIDE;
+};
+
+#endif  // CHROME_BROWSER_EXTENSIONS_API_TLD_TLD_API_H_
+
--- a/chrome/browser/extensions/extension_function_histogram_value.h
+++ b/chrome/browser/extensions/extension_function_histogram_value.h
@@ -556,6 +556,8 @@ enum HistogramValue {
   DIAGNOSTICS_SENDPACKET,
   METRICSPRIVATE_GETFIELDTRIAL,
   FILEBROWSERPRIVATE_ZOOM,
+  TLD_GET_BASE_DOMAIN,
+  TLD_GET_PUBLIC_SUFFIX,
   WEBVIEW_GO,
   WEBSTOREPRIVATE_ISININCOGNITOMODEFUNCTION,
   FILEBROWSERPRIVATE_REQUESTACCESSTOKEN,
--- a/chrome/browser/extensions/extension_function_registry.cc
+++ b/chrome/browser/extensions/extension_function_registry.cc
@@ -7,6 +7,7 @@
 #include "chrome/browser/extensions/api/preference/chrome_direct_setting.h"
 #include "chrome/browser/extensions/api/preference/preference_api.h"
 #include "chrome/browser/extensions/api/runtime/runtime_api.h"
+#include "chrome/browser/extensions/api/tld/tld_api.h"
 #include "chrome/browser/extensions/api/web_request/web_request_api.h"
 #include "chrome/common/extensions/api/generated_api.h"
 
@@ -49,6 +50,10 @@ void ExtensionFunctionRegistry::ResetFun
   RegisterFunction<extensions::RuntimeRequestUpdateCheckFunction>();
   RegisterFunction<extensions::RuntimeRestartFunction>();
 
+  // TLD.
+  RegisterFunction<TldGetBaseDomainFunction>();
+  RegisterFunction<TldGetPublicSuffix>();
+
   // Generated APIs
   extensions::api::GeneratedFunctionRegistry::RegisterAll(this);
 #endif  // defined(ENABLE_EXTENSIONS)
--- a/chrome/chrome_browser_extensions.gypi
+++ b/chrome/chrome_browser_extensions.gypi
@@ -604,6 +604,8 @@
         'browser/extensions/api/tabs/windows_util.h',
         'browser/extensions/api/test/test_api.cc',
         'browser/extensions/api/test/test_api.h',
+        'browser/extensions/api/tld/tld_api.cc',
+        'browser/extensions/api/tld/tld_api.h',
         'browser/extensions/api/top_sites/top_sites_api.cc',
         'browser/extensions/api/top_sites/top_sites_api.h',
         'browser/extensions/api/usb/usb_api.cc',
--- a/chrome/common/extensions/api/_api_features.json
+++ b/chrome/common/extensions/api/_api_features.json
@@ -707,6 +707,10 @@
     "dependencies": ["permission:ttsEngine"],
     "contexts": ["blessed_extension"]
   },
+  "tld": {
+    "channel": "stable",
+    "contexts": ["blessed_extension"]
+  },
   "types": {
     "channel": "stable",
     "extension_types": ["extension", "legacy_packaged_app", "platform_app"],
--- /dev/null
+++ b/chrome/common/extensions/api/tld.json
@@ -0,0 +1,57 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+[
+  {
+    "namespace": "tld",
+    "nodoc": "true",
+    "description": "Use the <code>chrome.infobars</code> API to add a horizontal panel just above a tab's contents. See the screenshot below.",
+    "compiler_options": {
+      "implemented_in": "chrome/browser/extensions/api/tld/tld_api.h"
+    },
+    "types": [],
+    "functions": [
+      {
+        "name": "getBaseDomain",
+        "type": "function",
+        "description": "Returns the base domain of a URI; that is, the public suffix with a given number of additional domain name parts.",
+        "nodoc": "true",
+        "parameters": [
+          {
+            "name": "uri",
+            "type": "string"
+          },
+          {
+            "type": "function",
+            "name": "callback",
+            "parameters": [
+              {"name": "domain", "type": "string", "description": "The base domain name of the associated URI if any"}
+            ]
+          }
+        ]
+      }
+      ,
+      {
+        "name": "getPublicSuffix",
+        "type": "function",
+        "description": "Returns the public suffix of the domain part of a URI.",
+        "nodoc": "true",
+        "parameters": [
+          {
+            "name": "uri",
+            "type": "string"
+          },
+          {
+            "type": "function",
+            "name": "callback",
+            "parameters": [
+              {"name": "suffix", "type": "string", "description": "The public suffix of the associated URI if any"}
+            ]
+          }
+        ]
+      }
+    ]
+  }
+
+]
--- a/chrome/common/extensions_api_resources.grd
+++ b/chrome/common/extensions_api_resources.grd
@@ -25,6 +25,7 @@
       <include name="IDR_EXTENSION_API_JSON_RUNTIME" file="extensions\api\runtime.json" type="BINDATA" />
       <include name="IDR_EXTENSION_API_JSON_SCRIPTBADGE" file="extensions\api\script_badge.json" type="BINDATA" />
       <include name="IDR_EXTENSION_API_JSON_TTS" file="extensions\api\tts.json" type="BINDATA" />
+      <include name="IDR_EXTENSION_API_JSON_TLD" file="extensions\api\tld.json" type="BINDATA" />
       <include name="IDR_EXTENSION_API_JSON_TTSENGINE" file="extensions\api\tts_engine.json" type="BINDATA" />
       <include name="IDR_EXTENSION_API_JSON_TYPES" file="extensions\api\types.json" type="BINDATA" />
       <include name="IDR_EXTENSION_API_JSON_TYPES_PRIVATE" file="extensions\api\types_private.json" type="BINDATA" />
--- a/extensions/common/extension_api.cc
+++ b/extensions/common/extension_api.cc
@@ -251,6 +251,7 @@ void ExtensionAPI::InitDefaultConfigurat
   RegisterSchemaResource("scriptBadge", IDR_EXTENSION_API_JSON_SCRIPTBADGE);
   RegisterSchemaResource("ttsEngine", IDR_EXTENSION_API_JSON_TTSENGINE);
   RegisterSchemaResource("tts", IDR_EXTENSION_API_JSON_TTS);
+  RegisterSchemaResource("tld", IDR_EXTENSION_API_JSON_TLD);
   RegisterSchemaResource("types", IDR_EXTENSION_API_JSON_TYPES);
   RegisterSchemaResource("types.private", IDR_EXTENSION_API_JSON_TYPES_PRIVATE);
   RegisterSchemaResource("webRequestInternal",
