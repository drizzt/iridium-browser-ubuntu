Description: GYP assumes ARMv7 always wants NEON, even if compile flags disable.
Origin: http://code.google.com/p/chromium/issues/detail?id=154107
Author: Chad Miller <chad.miller@canonical.com>
Bug-Chromium: 154107
Bug-Ubuntu: 1084852

--- a/third_party/webrtc/common_audio/common_audio.gyp
+++ b/third_party/webrtc/common_audio/common_audio.gyp
@@ -119,7 +119,7 @@
         ['target_arch=="ia32" or target_arch=="x64"', {
           'dependencies': ['common_audio_sse2',],
         }],
-        ['target_arch=="arm" or target_arch=="armv7"', {
+        ['arm_neon==1 and target_arch=="arm" or target_arch=="armv7"', {
           'sources': [
             'signal_processing/complex_bit_reverse_arm.S',
             'signal_processing/spl_sqrt_floor_arm.S',
@@ -129,7 +129,7 @@
             'signal_processing/spl_sqrt_floor.c',
           ],
           'conditions': [
-            ['arm_version==7', {
+            ['arm_version==7 and arm_neon==1', {
               'dependencies': ['common_audio_neon',],
               'sources': [
                 'signal_processing/filter_ar_fast_q12_armv7.S',
@@ -188,7 +188,7 @@
         },
       ],  # targets
     }],
-    ['(target_arch=="arm" and arm_version==7) or target_arch=="armv7"', {
+    ['arm_neon==1 and (target_arch=="arm" and arm_version==7) or target_arch=="armv7"', {
       'targets': [
         {
           'target_name': 'common_audio_neon',
--- a/third_party/webrtc/system_wrappers/source/cpu_features.cc
+++ b/third_party/webrtc/system_wrappers/source/cpu_features.cc
@@ -18,6 +18,47 @@
 
 #include "webrtc/typedefs.h"
 
+#include <elf.h>
+#ifdef __arm__
+#include <fcntl.h>
+#include <unistd.h>
+#include <linux/auxvec.h>
+#include <asm/hwcap.h>
+#endif
+
+#ifdef __arm__
+uint64_t WebRtc_GetCPUFeaturesARM() {
+	static bool detected = false;
+	static uint64_t have_neon = 0;
+
+	int fd;
+	Elf32_auxv_t auxv;
+	unsigned int hwcaps;
+
+	if (!detected) {
+		int fd;
+		Elf32_auxv_t auxv;
+		unsigned int hwcaps;
+
+		fd = open("/proc/self/auxv", O_RDONLY);
+		if (fd >= 0) {
+			while (read(fd, &auxv, sizeof(Elf32_auxv_t)) == sizeof(Elf32_auxv_t)) {
+				if (auxv.a_type == AT_HWCAP) {
+					have_neon = (auxv.a_un.a_val & HWCAP_NEON) ? kCPUFeatureNEON : 0;
+					break;
+				}
+			}
+			close (fd);
+		} else {
+			have_neon = 0;
+		}
+		detected = true;
+	}
+
+	return 0 | have_neon; // others here as we need them
+}
+#endif
+
 // No CPU feature is available => straight C path.
 int GetCPUInfoNoASM(CPUFeature feature) {
   (void)feature;
